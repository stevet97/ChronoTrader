# -*- coding: utf-8 -*-
"""RNN Architecture: Google Stockprice

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M6FN_Vd7TMJmc2XnrF5-SweG8gyU2rMr

#Recurrent Neural Network

# 1 - Data Preprocessing

##Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""##Mount Drive"""

### Using Google Colab

1. Make sure you have the dataset files (`Google_Stock_Price_Train.csv`) uploaded to a folder named `MyDataset` in your Google Drive.
2. Run the notebook in Google Colab.
3. The script will mount your Google Drive and access the dataset from `/MyDrive/MyDataset/`.

from google.colab import drive
drive.mount('/content/drive')

"""##File Access"""

file_path = '/content/drive/MyDrive/MyDataset/Google_Stock_Price_Train.csv'
dataset_train = pd.read_csv(file_path)
training_set = dataset_train.iloc[:, 1:2].values

"""##Feature Scaling"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0,1))
training_set_scaled = sc.fit_transform(training_set)

"""##Creating a data structure with 60 timesteps and 2 outputs"""

X_train = []
y_train = []
for i in range(60, 1258):
  X_train.append(training_set_scaled[i-60:i, 0])
  y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

"""##Reshaping the data"""

#Samples          #Timesteps      #Features
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

"""#2 - Building the RNN

##Importing the Keras libraries and packages
"""

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

"""##Initializing the RNN"""

regressor = Sequential() #Means you're building an empty model with one layer after another

"""##Adding the Sequential Layers"""

#Adding the first LSTM layer + Dropout regularization to avoid overfitting
regressor.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
regressor.add(Dropout(0.2))

#Add a second LSTM layer + dropout regularization
regressor.add(LSTM(units=50, return_sequences=True))
regressor.add(Dropout(0.2))

#Add a third LSTM layer + dropout regularization
regressor.add(LSTM(units=50, return_sequences=True))
regressor.add(Dropout(0.2))

#Add a fourth LSTM layer + dropout regularization
regressor.add(LSTM(units=50, return_sequences=False))
regressor.add(Dropout(0.2))

#Add the output (fully connected) layer
regressor.add(Dense(units=1))

"""##Compiling the RNN


"""

regressor.compile(optimizer='adam', loss='mean_squared_error')

"""##Fitting the RNN to the training set"""

regressor.fit(X_train, y_train, epochs=100, batch_size=32)

"""#3 - Making the predictions and validating the results

##Getting the real stock price for 2017
"""

file_path = '/content/drive/My Drive/AI projects/Recurrent Neural Networks Project/Google_Stock_Price_Test.csv'
dataset_test = pd.read_csv(file_path)
real_stock_price = dataset_test.iloc[:, 1:2].values

print(real_stock_price)

import matplotlib.pyplot as plt

# Plot the real stock prices
plt.plot(real_stock_price, color='blue', label='Real Google Stock Price')

# Add titles and labels
plt.title('Google Stock Price in 2017')
plt.xlabel('Time')
plt.ylabel('Stock Price')

# Display legend
plt.legend()

# Show the plot
plt.show()

"""##Getting the predicted stock price of 2017"""

dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = []
for i in range(60, len(inputs)):
  X_test.append(inputs[i-60:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)
print(predicted_stock_price)

"""##Visualizing the results"""

plt.plot(real_stock_price, color='blue', label='Real Google Stock Price')
plt.plot(predicted_stock_price, color = 'red', label='Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()

